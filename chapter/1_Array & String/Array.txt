** 인자의 Arrow func은 Callback을 의미한다.

1. Array의 다양한 Methods
    .1 Array.map((item, index) => ...condition)
        : Callback에 따른 결과를 모아 새로운 배열을 반환한다.
        cf) Array.forEach()와 기능은 비슷하나, 배열을 반환한다는 차이가 있다.

    .2 Array.filter((item, index) => ...condition)
        : 조건과 일치하는 모든 항목을 배열로 반환한다.

    .3 Array.reduce()
        : 배열의 모든 요소를 바탕으로 하나의 최종값을 생성한다.
        // const allWeight = [56, 69, 42, 91];
        // const initialTotal = 0;
        // const totalWeight = allWeight.reduce((total, current) => {
        //   console.log(total, current);
        //   total = total + current;
        //   return total;
        // }, initialTotal);
        // console.log(totalWeight);

    .4 Array.some&every
        : some은 |, every는 &로 true나 false만을 반환한다.

    .5 Array.find((item, index) => ...condition)
        : 조건과 일치하는 첫 번째 요소를 반환한다. 
        cf) findIndex는 index를 반환한다.

    .6 Array.from()
        : Array.from()은 string, nodelist, HTMLCollection 같은 유사 배열 객체, 혹은 iterable object를 얕게 복사하여 새로운 배열을 생성한다.
        : Array.from()은 특히 HTMLCollections를 일괄적으로 다뤄야 할 때 유용하다.
        : querySelectorAll은 nodelist를 return하고, nodelist는 foreach method를 사용할 수 있다.

        cf) Array.of(...args)은 args들을 요소로 갖는 배열을 반환한다. 비슷한 속성이나 형태의 원소들을 여럿 다뤄야 할 때 유용하다.

    .7 Array.fill(value, start, end)
        : 지정된 index 내의 배열 요소를 value로 채운다.
    

2. Set & Map
    .1 Set
        : 고유한 값이나 고유한 객체의 컬렉션이다.
    .2 Map
        : key와 value 쌍으로 구성된 컬렉션이다.
        // const map = new Map();
        // map.set("Lewis", { name: "Lewis Capaldi", age: 25 });
        // map.set("Camila", { name: "cabello", age: 27 });
        // console.log(map.get("Camila"));
        // for (let [key, value] of map) {
        //   console.log(key, value);
        // }
